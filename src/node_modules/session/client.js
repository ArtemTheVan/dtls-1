'use strict';

/* eslint class-methods-use-this: ["error", { "exceptMethods": ["type"] }] */

const AbstractSession = require('session/abstract');
const { sessionType, randomSize } = require('lib/constants');
const { createRandom, createFinished } = require('session/utils');
const { createRetransmitClient } = require('fsm/retransmitter');

module.exports = class ClientSession extends AbstractSession {
  /**
   * @constructor
   */
  constructor() {
    super();

    this.cookie = null;
    this.retransmitter = createRetransmitClient();

    this.serverCertificateVerifyCallback = () => true;
  }

  /**
   * Get type of the Session.
   * @returns {number}
   */
  get type() {
    return sessionType.CLIENT;
  }

  /**
   * Handles starts handshake.
   * @param {function} done
   */
  startHandshake(done) {
    super.startHandshake();

    this.clientRandom = Buffer.allocUnsafe(randomSize);
    createRandom(this.clientRandom, done);
  }

  /**
   * Create finished message checksum for client.
   */
  createFinished() {
    const queue = this.handshakeQueue.slice();
    const label = 'client finished';

    this.clientFinished = createFinished(
      this.cipher,
      this.masterSecret,
      queue,
      label
    );
  }

  /**
   * Starts next epoch for server.
   */
  nextEpochServer() {
    super.nextEpochServer();

    this.window.reset();
  }

  /**
   * x509 Certificate.
   * An instance of @fidm/x509/Certificate.
   * @param {Certificate} certificate
   * @returns {bool}
   */
  verifyCertificate(certificate) {
    return Boolean(this.serverCertificateVerifyCallback(certificate));
  }
};
