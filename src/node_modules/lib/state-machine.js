'use strict';

const assert = require('assert');
const Emitter = require('events');

const _state = Symbol('state'); // Cuurent state.
const _transitions = Symbol('transitions'); // List of state transitions.
const _previous = Symbol('previous'); // Previous state.

/**
 * Simple state machine.
 */
module.exports = class StateMachine extends Emitter {
  /**
   * @class {StateMachine}
   * @param {Object} transitions State map.
   * @param {string} state Initial state.
   */
  constructor(transitions, state = null) {
    super();

    this[_state] = state;
    this[_previous] = null;
    this[_transitions] = transitions;
  }

  /**
   * Get current state.
   * @returns {string}
   */
  get state() {
    return this[_state];
  }

  /**
   * Get previous state.
   * @returns {string}
   */
  get previous() {
    return this[_previous];
  }

  /**
   * Switch to the next state.
   * @param {string} state
   */
  next(state) {
    if (this.state !== null) {
      /** @type {Set} */
      const allowedStates = this[_transitions][this.state];

      assert(
        allowedStates.has(state),
        `Forbidden transition from ${this.state} to ${state}`
      );
    }

    this[_previous] = this[_state];
    this[_state] = state;

    this.emit(state);
  }

  /**
   * Switch to previous state and discard state change.
   */
  reset() {
    this[_state] = this[_previous];
    this.emit('reset');
  }
};
