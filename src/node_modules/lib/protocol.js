'use strict';

const {
  types: { uint8, uint16be, uint48be, uint24be, buffer, array },
} = require('binary-data');

// Record layer.

const ProtocolVersion = uint16be;

const ContentType = uint8;

const DTLSPlaintextHeader = {
  type: ContentType,
  version: ProtocolVersion,
  epoch: uint16be,
  sequenceNumber: uint48be,
  length: uint16be,
};

const DTLSPlaintext = {
  ...DTLSPlaintextHeader,
  fragment: buffer(context => context.current.length),
};

const AlertLevel = uint8;
const AlertDescription = uint8;

const Alert = {
  level: AlertLevel,
  description: AlertDescription,
};

// Handshake Protocol

const HandshakeType = uint8;

const HandshakeHeader = {
  type: HandshakeType,
  length: uint24be,
  sequence: uint16be,
  fragment: {
    offset: uint24be,
    length: uint24be,
  },
};

const Handshake = {
  ...HandshakeHeader,
  body: buffer(context => context.current.length),
};

const Random = buffer(32);

const SessionID = buffer(uint8);

const CipherSuite = uint16be;

const CompressionMethod = uint8;

const ClientHello = {
  clientVersion: ProtocolVersion,
  random: Random, // Unixtime + 28 random bytes.,
  sessionId: SessionID,
  cookie: buffer(uint8),
  cipherSuites: array(CipherSuite, uint16be, 'bytes'),
  compressionMethods: array(CompressionMethod, uint8, 'bytes'),
};

const HelloVerifyRequest = {
  serverVersion: ProtocolVersion,
  cookie: buffer(uint8),
};

const ExtensionType = uint16be;

const Extension = {
  type: ExtensionType,
  data: buffer(uint16be),
};

const ExtensionList = array(Extension, uint16be, 'bytes');

const ServerHello = {
  serverVersion: ProtocolVersion,
  random: Random, // Unixtime + 28 random bytes.
  sessionId: SessionID,
  cipherSuite: CipherSuite,
  compressionMethod: CompressionMethod,
};

const ASN11Cert = buffer(uint24be);

const Certificate = {
  certificateList: array(ASN11Cert, uint24be, 'bytes'),
};

const EncryptedPreMasterSecret = buffer(uint16be);

const AEADAdditionalData = {
  epoch: uint16be,
  sequence: uint48be,
  type: ContentType,
  version: ProtocolVersion,
  length: uint16be,
};

module.exports = {
  DTLSPlaintextHeader,
  DTLSPlaintext,
  Alert,
  Handshake,
  HandshakeHeader,
  ClientHello,
  HelloVerifyRequest,
  ExtensionList,
  ServerHello,
  Certificate,
  EncryptedPreMasterSecret,
  AEADAdditionalData,
};
