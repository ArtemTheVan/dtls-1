'use strict';

/**
 * Alert protocol.
 * @link https://tools.ietf.org/html/rfc5246#section-7.2
 */
const alertLevel = {
  WARNING: 1,
  FATAL: 2,
};

const alertDescription = {
  CLOSE_NOTIFY: 0,
  UNEXPECTED_MESSAGE: 10,
  BAD_RECORD_MAC: 20,
  DECRYPTION_FAILED_RESERVED: 21,
  RECORD_OVERFLOW: 22,
  DECOMPRESSION_FAILURE: 30,
  HANDSHAKE_FAILURE: 40,
  NO_CERTIFICATE_RESERVED: 41,
  BAD_CERTIFICATE: 42,
  UNSUPPORTED_CERTIFICATE: 43,
  CERTIFICATE_REVOKED: 44,
  CERTIFICATE_EXPIRED: 45,
  CERTIFICATE_UNKNOWN: 46,
  ILLEGAL_PARAMETER: 47,
  UNKNOWN_CA: 48,
  ACCESS_DENIED: 49,
  DECODE_ERROR: 50,
  DECRYPT_ERROR: 51,
  EXPORT_RESTRICTION_RESERVED: 60,
  PROTOCOL_VERSION: 70,
  INSUFFICIENT_SECURITY: 71,
  INTERNAL_ERROR: 80,
  USER_CANCELED: 90,
  NO_RENEGOTIATION: 100,
  UNSUPPORTED_EXTENSION: 110,
};

const sessionType = {
  CLIENT: 1,
  SERVER: 2,
};

/**
 * Handshake Protocol
 * @link https://tools.ietf.org/html/rfc6347#section-4.3.2
 */
const handshakeType = {
  HELLO_REQUEST: 0,
  CLIENT_HELLO: 1,
  SERVER_HELLO: 2,
  HELLO_VERIFY_REQUEST: 3,
  CERTIFICATE: 11,
  SERVER_KEY_EXCHANGE: 12,
  CERTIFICATE_REQUEST: 13,
  SERVER_HELLO_DONE: 14,
  CERTIFICATE_VERIFY: 15,
  CLIENT_KEY_EXCHANGE: 16,
  FINISHED: 20,
};

const contentType = {
  CHANGE_CIPHER_SPEC: 20,
  ALERT: 21,
  HANDSHAKE: 22,
  APPLICATION_DATA: 23,
};

const protocolVersion = {
  DTLS_1_0: 0xfeff,
  DTLS_1_2: 0xfefd,
};

const cipherSuites = {
  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: 0xc02b,
  TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: 0xc02c,
  TLS_ECDHE_ECDSA_WITH_AES_128_CCM: 0xc0ac,
  TLS_ECDHE_ECDSA_WITH_AES_256_CCM: 0xc0ad,
  TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: 0xc02f,
  TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: 0xc030,
  TLS_RSA_WITH_AES_128_GCM_SHA256: 0x009c,
  TLS_RSA_WITH_AES_256_GCM_SHA384: 0x009d,
  TLS_RSA_WITH_AES_128_CCM: 0xc09c,
  TLS_RSA_WITH_AES_256_CCM: 0xc09d,
};

const compressionMethod = {
  NULL: 0,
};

const extensionTypes = {
  EXTENDED_MASTER_SECRET: 23,
  ELLIPTIC_CURVES: 10,
  EC_POINT_FORMATS: 11,
};

const AEAD_AES_128_GCM = {
  K_LEN: 16, // Length of a key.
  N_MIN: 12, // Min nonce length.
  N_MAX: 12, // Max nonce length.
  P_MAX: 2 ** 36 - 31, // Max length of a plaintext.

  // Max safe int in js is 2 ** 53. So, use this value
  // instead of 2 ** 61 as described in rfc5116.
  A_MAX: 2 ** 53 - 1, // Max length of an additional data.
  C_MAX: 2 ** 36 - 15, // Cipher text length.
};

const AEAD_AES_256_GCM = {
  K_LEN: 32, // Length of a key.
  N_MIN: 12, // Min nonce length.
  N_MAX: 12, // Max nonce length.
  P_MAX: 2 ** 36 - 31, // Max length of a plaintext.

  // Note: see above.
  A_MAX: 2 ** 53 - 1, // Max length of an additional data.
  C_MAX: 2 ** 36 - 15, // Cipher text length.
};

const AEAD_AES_128_CCM = {
  K_LEN: 16, // Length of a key.
  N_MIN: 12, // Min nonce length.
  N_MAX: 12, // Max nonce length.
  P_MAX: 2 ** 24 - 1, // Max length of a plaintext.

  // Max safe int in js is 2 ** 53. So, use this value
  // instead of 2 ** 64 as described in rfc5116.
  A_MAX: 2 ** 53 - 1, // Max length of an additional data.
  C_MAX: 2 ** 24 + 15, // Cipher text length.
};

const AEAD_AES_256_CCM = {
  K_LEN: 32, // Length of a key.
  N_MIN: 12, // Min nonce length.
  N_MAX: 12, // Max nonce length.
  P_MAX: 2 ** 24 - 1, // Max length of a plaintext.

  // Max safe int in js is 2 ** 53. So, use this value
  // instead of 2 ** 64 as described in rfc5116.
  A_MAX: 2 ** 53 - 1, // Max length of an additional data.
  C_MAX: 2 ** 24 + 15, // Cipher text length.
};

const randomSize = 32;
const maxSessionIdSize = 32;

const namedCurves = {
  // curves 1 - 22 was deprecated
  // secp256r1: 23, do not support by nodejs
  secp384r1: 24,
  secp521r1: 25,
  // x25519: 29, do not support by nodejs
  // x448: 30,  do not support by nodejs
};

const ecCurveTypes = {
  namedCurve: 3,
};

const signTypes = {
  NULL: 0,
  ECDHE: 1,
};

const keyTypes = {
  NULL: 0,
  RSA: 1,
  ECDSA: 2,
};

const kxTypes = {
  NULL: 0,
  RSA: 1,
  ECDHE_RSA: 2,
  ECDHE_ECDSA: 3,
};

const signAlgoSignTypes = {
  RSA: 1,
  ECDSA: 3,
};

const signAlgoHashTypes = {
  SHA1: 2,
  SHA256: 4,
  SHA384: 5,
  SHA512: 6,
};

const getHashNameBySignAlgo = hashType => {
  switch (hashType) {
    case signAlgoHashTypes.SHA1:
      return 'sha1';
    case signAlgoHashTypes.SHA256:
      return 'sha256';
    case signAlgoHashTypes.SHA384:
      return 'sha384';
    case signAlgoHashTypes.SHA512:
      return 'sha512';
    default:
      return null;
  }
};

module.exports = {
  alertLevel,
  alertDescription,
  sessionType,
  handshakeType,
  contentType,
  protocolVersion,
  cipherSuites,
  compressionMethod,
  extensionTypes,
  AEAD_AES_128_GCM,
  AEAD_AES_256_GCM,
  AEAD_AES_128_CCM,
  AEAD_AES_256_CCM,
  randomSize,
  maxSessionIdSize,
  namedCurves,
  ecCurveTypes,
  signTypes,
  keyTypes,
  kxTypes,
  signAlgoSignTypes,
  signAlgoHashTypes,
  getHashNameBySignAlgo,
};
