'use strict';

const { Duplex } = require('stream');
const unicast = require('unicast');
const isDtls = require('is-dtls');
const streamfilter = require('streamfilter');
const pump = require('pump');
const debug = require('debug')('dtls:socket');
const ClientSession = require('session/client');
const ProtocolReader = require('fsm/protocol');
const Sender = require('lib/sender');
const Decoder = require('filter/decoder');
const Defragmentation = require('filter/defragmentation');
const Reordering = require('filter/reordering');

const _session = Symbol('_session');
const _queue = Symbol('_queue');
const _protocol = Symbol('_protocol');
const _socket = Symbol('_socket');

/**
 * DTLS socket.
 */
class Socket extends Duplex {
  /**
   * @constructor
   * @param {object} options
   */
  constructor(options = {}) {
    super({ objectMode: false, decodeStrings: false, allowHalfOpen: true });

    const { socket } = options;

    const session = new ClientSession();
    const protocol = new ProtocolReader(session);
    const writer = new Sender(session);
    const decoder = new Decoder(session);
    const defrag = new Defragmentation();
    const reorder = new Reordering(session);

    const onerror = err => {
      if (err) {
        this.emit('error', err);
      }
    };
    const isdtls = streamfilter(chunkFilter);

    pump(writer, socket, onerror);
    pump(socket, isdtls, decoder, reorder, defrag, protocol, onerror);

    this[_session] = session;
    this[_queue] = [];
    this[_protocol] = protocol;
    this[_socket] = socket;

    session.on('data', packet => this.push(packet));

    session.once('handshake:finish', () => {
      process.nextTick(() => this.emit('connect'));

      this[_queue].forEach(data => session.sendMessage(data));
      this[_queue].length = 0;
    });

    session.once('certificate', cert =>
      process.nextTick(() => this.emit('certificate', cert))
    );

    session.on('error', code =>
      this.emit('error', new Error(`alert code ${code}`))
    );
  }

  /**
   * Open DTLS connection
   * @param {function} [callback]
   */
  connect(callback) {
    if (typeof callback === 'function') {
      this.once('connect', callback);
    }

    this[_protocol].start();
  }

  /**
   * Close the underlying socket and stop listening for data on it.
   */
  close() {
    this[_socket].close();
  }

  /**
   * @private
   */
  _read() {} // eslint-disable-line class-methods-use-this

  /**
   * @private
   * @param {Buffer} chunk
   * @param {string} encoding
   * @param {function} callback
   */
  _write(chunk, encoding, callback) {
    if (this[_session].isHandshakeInProcess) {
      this[_queue].push(chunk);
      this.once('connect', () => callback());
    } else {
      this[_session].sendMessage(chunk);
      callback();
    }
  }

  /**
   * @private
   */
  _destroy() {
    this[_queue].length = 0;
    this[_session] = null;
  }
}

/**
 * Connect socket to dtls server.
 * @param {object} options
 * @param {function} [callback]
 * @returns {Socket}
 */
function connect(options = {}, callback) {
  if (!isUnicastSocket(options.socket)) {
    options.socket = unicast.createSocket(options);
  }

  const socket = new Socket(options);
  socket.connect(callback);

  return socket;
}

/**
 * Check if argument is Unicast socket.
 * @param {any} s
 * @returns {bool}
 */
function isUnicastSocket(s) {
  return s instanceof unicast.Socket;
}

/**
 * Check if incoming message is dtls.
 * @param {Buffer} data
 * @param {string} enc
 * @param {function} callback
 */
function chunkFilter(data, enc, callback) {
  const isCorrect = isDtls(data);
  debug('got message, is dtls = %s', isCorrect);
  callback(!isCorrect);
}

module.exports = {
  connect,
};
