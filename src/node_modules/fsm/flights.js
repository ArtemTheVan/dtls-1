'use strict';

const { constants: states } = require('fsm/states');

const FLIGHT_1 = 1;
const FLIGHT_2 = 2;
const FLIGHT_3 = 3;
const FLIGHT_4 = 4;
const FLIGHT_5 = 5;
const FLIGHT_6 = 6;

/**
 * Abstract state in Flight State Machine.
 */
class FlightState {
  /**
   * @constructor
   * @param {number} state state of Flight State Machine
   * @param {number[]} messages list of handshake messages in this state
   */
  constructor(state, messages = []) {
    this.state = state;
    this.messages = Array.isArray(messages) ? messages : [messages];
  }
}

/**
 * Finite State Machine for full handshake.
 */
function* createFullFlightMachine() {
  const STATES = [
    new FlightState(FLIGHT_1, states.CLIENT_HELLO),
    new FlightState(FLIGHT_2, states.HELLO_VERIFY_REQUEST),
    new FlightState(FLIGHT_3, states.CLIENT_HELLO), // with cookie
    new FlightState(FLIGHT_4, [
      states.SERVER_HELLO,
      states.CERTIFICATE, // optional
      states.SERVER_KEY_EXCHANGE, // optional
      states.CERTIFICATE_REQUEST, // optional
      states.SERVER_HELLO_DONE,
    ]),
    new FlightState(FLIGHT_5, [
      states.CERTIFICATE,
      states.CLIENT_KEY_EXCHANGE,
      states.CERTIFICATE_VERIFY,
      states.CHANGE_CIPHER_SPEC,
      states.FINISHED,
    ]),
    new FlightState(FLIGHT_6, [states.CHANGE_CIPHER_SPEC, states.FINISHED]),
  ];

  for (const state of STATES) {
    yield state;
  }
}

/**
 * Finite State Machine for session-resuming handshake.
 */
function* createFastFlightMachine() {
  const STATES = [
    new FlightState(FLIGHT_1, states.CLIENT_HELLO),
    new FlightState(FLIGHT_2, [
      states.SERVER_HELLO,
      states.CHANGE_CIPHER_SPEC,
      states.FINISHED,
    ]),
    new FlightState(FLIGHT_3, [states.CHANGE_CIPHER_SPEC, states.FINISHED]),
  ];

  for (const state of STATES) {
    yield state;
  }
}

module.exports = {
  createFullFlightMachine,
  createFastFlightMachine,
  states: {
    FLIGHT_1,
    FLIGHT_2,
    FLIGHT_3,
    FLIGHT_4,
    FLIGHT_5,
    FLIGHT_6,
  },
};
