'use strict';

const {
  cipherSuites,
  AEAD_AES_128_GCM,
  AEAD_AES_256_GCM,
} = require('lib/constants');
const AEADCipher = require('cipher/aead');

module.exports = defaultCiphers;

/**
 * Get the list of default cipher suites.
 * @returns {AEADCipher[]}
 */
function defaultCiphers() {
  return [
    createAEADCipher(
      cipherSuites.TLS_RSA_WITH_AES_128_GCM_SHA256,
      'TLS_RSA_WITH_AES_128_GCM_SHA256',
      'aes-128-gcm',
      'rsa',
      AEAD_AES_128_GCM
    ),

    createAEADCipher(
      cipherSuites.TLS_RSA_WITH_AES_256_GCM_SHA384,
      'TLS_RSA_WITH_AES_256_GCM_SHA384',
      'aes-256-gcm',
      'rsa',
      AEAD_AES_256_GCM,
      'sha384'
    ),
  ];
}

/**
 * @param {*} cipher
 * @param {*} id
 * @param {*} name
 * @param {*} block
 * @param {*} kx
 * @param {*} hash
 */
function initCipher(cipher, id, name, block, kx, hash = 'sha256') {
  cipher.id = id;
  cipher.name = name;
  cipher.blockAlgorithm = block;
  cipher.kxAlgorithm = kx;
  cipher.hash = hash;
}

/**
 * @param {*} id
 * @param {*} name
 * @param {*} block
 * @param {*} kx
 * @param {*} constants
 * @param {*} hash
 * @returns {AEADCipher}
 */
function createAEADCipher(id, name, block, kx, constants, hash = 'sha256') {
  const cipher = new AEADCipher();

  initCipher(cipher, id, name, block, kx, hash);

  cipher.keyLength = constants.K_LEN;
  cipher.nonceLength = constants.N_MAX;

  // RFC5288, sec. 3
  cipher.nonceImplicitLength = 4;
  cipher.nonceExplicitLength = 8;

  cipher.ivLength = cipher.nonceImplicitLength;

  cipher.authTagLength = 16;

  return cipher;
}
